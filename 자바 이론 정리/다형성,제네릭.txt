다형성을 사용하면 여러 타입이 올 수 있지만 메인에서 코드를 잘못 작성하여도 
컴파일 하기 전까진 오류가 뜨지 않는다.


제네릭 클래스를 사용하면 타입을 미리 정해놓지 않고 메인문에서 타입을 지정해주면
코드를 잘못 작성 시 바로 오류가 나는것을 직관적으로 알 수 있다.

제네릭 클래스의 정의는 <>(다이아몬드 기호)안에 매개변수의 타입을 정의한다.

타입 추론: 생성하는 제네릭 타입 생략 가능
GenericBox<Integer> integerBox2 = new GenericBox<Integer>();
 -> GenericBox<Integer> integerBox2 = new GenericBox<>();

제네릭의 핵심은 사용할 타입을 미리 결정하는 않는다는 점
-> 생성 시점에 타입을 결정한다.

제네릭(Generic) 단어
제네릭이라는 단어는 일반적인, 범용적인이라는 영어 단어 뜻이다.
풀어보면 특정 타입에 속한 것이 아니라 일반적으로, 범용적으로 사용할 수 있다는 뜻이다.
 
제네릭 타입 (Generic Type) 
클래스나 인터페이스를 정의할 때 타입 매개변수를 사용하는 것을 말한다.
제네릭 클래스, 제네릭 인터페이스를 모두 합쳐서 제네릭 타입이라 한다.
타입은 클래스, 인터페이스, 기본형( `int`등)을 모두 합쳐서 부르는 말이다.
예: class GenericBox<T> { private T t; }
여기에서  GenericBox<T>를 제네릭 타입이라 한다.
 
타입 매개변수 (Type Parameter) **
제네릭 타입이나 메서드에서 사용되는 변수로, 실제 타입으로 대체된다.
예: 
GenericBox<T>여기에서 T를 타입 매개변수라 한다.
 
타입 인자 (Type Argument)
제네릭 타입을 사용할 때 제공되는 실제 타입이다.
예: GenericBox<Integer>여기에서 Integer를 타입 인자라 한다.

제네릭의 타입 매개변수와 타입 인자
제네릭도 앞서 설명한 메서드의 매개변수와 인자의 관계와 비슷하게 작동한다.
제네릭 클래스를 정의할 때 내부에서 사용할 타입을 미리 결정하는 것이 아니라, 해당 클래스를 실제 사용하는 생성 시점에 내부에서 사용할 타입을 결정하는 것이다. 
차이가 있다면 메서드의 매개변수는 사용할 값에 대한 결정을 나중으로 미루는 것이고, 
제네릭의 타입 매개변수는 사용할 타입에 대한 결정을 나중으로 미루는 것이다











